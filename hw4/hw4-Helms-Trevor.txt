Assignment #4
Trevor Helms (th13)
-------------------------------------

--------------------------------------------------------------------------------
Problem 1:
Flag: flag{w3l0m3_t0_r3}

Solving: First, I ran the file and strings command (output below). After examining
the code, it was clear there was a comparison going on that would always evaluate to
false and skip execution of the flag function. Skipping over the two comparison
instructions allowed proper execution of the flag function (seen below in PEDA output).

Output of running file cmd: trev@th13-ctf:~/CyberSec/cis4930-ctf/hw4$ file pat
pat: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=ddb93c8d5ebf71138e784915a1a664404a219fc7, not stripped

Strings output: trev@th13-ctf:~/CyberSec/cis4930-ctf/hw4$ strings pat
/lib/ld-linux.so.2
d@J!
libc.so.6
_IO_stdin_used
puts
__stack_chk_fail
__libc_start_main
__gmon_start__
GLIBC_2.0
GLIBC_2.4
PTRh
QVhk
UWVS
t$,U
[^_]
You will never get the flag!
;*2$"(
GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
crtstuff.c
__JCR_LIST__
deregister_tm_clones
__do_global_dtors_aux
completed.7200
__do_global_dtors_aux_fini_array_entry
frame_dummy
__frame_dummy_init_array_entry
pat.c
__FRAME_END__
__JCR_END__
__init_array_end
_DYNAMIC
__init_array_start
__GNU_EH_FRAME_HDR
_GLOBAL_OFFSET_TABLE_
__libc_csu_fini
_ITM_deregisterTMCloneTable
__x86.get_pc_thunk.bx
_edata
dummyFunction
__stack_chk_fail@@GLIBC_2.4
__data_start
puts@@GLIBC_2.0
__gmon_start__
__dso_handle
_IO_stdin_used
__libc_start_main@@GLIBC_2.0
__libc_csu_init
_fp_hw
__bss_start
main
_Jv_RegisterClasses
__TMC_END__
_ITM_registerTMCloneTable
flag
.symtab
.strtab
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.plt.got
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.dynamic
.got.plt
.data
.bss
.comment


GDB-PEDA output:

[----------------------------------registers-----------------------------------]
EAX: 0xffffcd80 ("flag{w3l0m3_t0_r3}")
EBX: 0xffffcda0 --> 0x0
ECX: 0x7d ('}')
EDX: 0xffffcd80 ("flag{w3l0m3_t0_r3}")
ESI: 0x1
EDI: 0xf7fb3000 --> 0x1b5db0
EBP: 0xffffcdd8 --> 0xffffcdf8 --> 0x0
ESP: 0xffffcd74 --> 0x0
EIP: 0x8048584 (<flag+222>:     push   eax)
EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x804857a <flag+212>:        mov    BYTE PTR [eax+0x12],0x0
   0x804857e <flag+216>:        mov    eax,DWORD PTR [ebp-0x24]
   0x8048581 <flag+219>:        sub    esp,0xc
=> 0x8048584 <flag+222>:        push   eax
   0x8048585 <flag+223>:        call   0x8048340 <puts@plt>
   0x804858a <flag+228>:        add    esp,0x10
   0x804858d <flag+231>:        mov    esp,ebx
   0x804858f <flag+233>:        nop
[------------------------------------stack-------------------------------------]
0000| 0xffffcd74 --> 0x0
0004| 0xffffcd78 --> 0xf7fe2940 (add    edi,0x1a6c0)
0008| 0xffffcd7c --> 0xf7ffdc08 --> 0xf7fd7000 (jg     0xf7fd7047)
0012| 0xffffcd80 ("flag{w3l0m3_t0_r3}")
0016| 0xffffcd84 ("{w3l0m3_t0_r3}")
0020| 0xffffcd88 ("0m3_t0_r3}")
0024| 0xffffcd8c ("t0_r3}")
0028| 0xffffcd90 --> 0xf7007d33
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
0x08048584 in flag ()
gdb-peda$

--------------------------------------------------------------------------------

Problem 2:
Flag: re{s3g_f4ults_ar3nt_sc4ry_4ft3r_4ll}

Solving: Setting a breakpoint at the location of the seg fault and skipping over the
instruction allowed me to execute the program and retrieve the flag.

file output: trev@th13-ctf:~/CyberSec/cis4930-ctf/hw4$ file segf
segf: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=c64ec12d24429f6bd5e193797bc545b252dae019, stripped

strings output:
trev@th13-ctf:~/CyberSec/cis4930-ctf/hw4$ strings segf
/lib/ld-linux.so.2
libc.so.6
_IO_stdin_used
fflush
puts
stdout
malloc
__libc_start_main
free
__gmon_start__
GLIBC_2.0
PTRh
QVh|
UWVS
t$,U
[^_]
;*2$"
GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.plt.got
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.dynamic
.got.plt
.data
.bss
.comment

GDB-PEDA output:

[----------------------------------registers-----------------------------------]
EAX: 0x0
EBX: 0x0
ECX: 0xffffce10 --> 0x1
EDX: 0xffffce34 --> 0x0
ESI: 0x1
EDI: 0xf7fb3000 --> 0x1b5db0
EBP: 0xffffcda8 --> 0xffffcdb8 --> 0xffffcdc8 --> 0xffffcdd8 --> 0xffffcde8 --> 0xffffcdf8 (--> ...)
ESP: 0xffffcd90 --> 0xf7ffd000 --> 0x23f3c
EIP: 0x804875c (mov    BYTE PTR [ebp-0x11],al)
EFLAGS: 0x286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x804874f:   mov    DWORD PTR [ebp-0x10],0x0
   0x8048756:   mov    eax,DWORD PTR [ebp-0x10]
   0x8048759:   movzx  eax,BYTE PTR [eax]
=> 0x804875c:   mov    BYTE PTR [ebp-0x11],al
   0x804875f:   mov    DWORD PTR [ebp-0xc],0x80484cb
   0x8048766:   mov    eax,DWORD PTR [ebp-0xc]
   0x8048769:   call   eax
   0x804876b:   nop
[------------------------------------stack-------------------------------------]
0000| 0xffffcd90 --> 0xf7ffd000 --> 0x23f3c
0004| 0xffffcd94 --> 0xf7ffd918 --> 0x0
0008| 0xffffcd98 --> 0x0
0012| 0xffffcd9c --> 0x8048294 ("__libc_start_main")
0016| 0xffffcda0 --> 0x0
0020| 0xffffcda4 --> 0xffffce44 --> 0x84701906
0024| 0xffffcda8 --> 0xffffcdb8 --> 0xffffcdc8 --> 0xffffcdd8 --> 0xffffcde8 --> 0xffffcdf8 (--> ...)
0028| 0xffffcdac --> 0x8048779 (nop)
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
gdb-peda$ continue
Continuing.
re{s3g_f4ults_ar3nt_sc4ry_4ft3r_4ll}
[Inferior 1 (process 4918) exited normally]
Warning: not running or target is remote
gdb-peda$

--------------------------------------------------------------------------------

Problem 3:
